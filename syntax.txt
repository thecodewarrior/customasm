doc = <line>*
line = <directive>$ | <label> | <variable> | <local_label> | <local_variable> | <insn>$

directive =
    `#d[0-9]+` <directive_data> |
    `#cpudef` [<string>] `{` <cpudef> `}` |
    `#bankdef` <string (nonempty)> `{` <bankdef> `}` |
    `#bank` <string> |
    `#addr` <usize> |
    `#align` <usize> |
    `#res` <usize> |
    `#str` <string> |
    `#include` <string> |
    `#incbin` <string> |
    `#incbinstr` <string> |
    `#inchexstr` <string> |
    `#fun` <identifier> `(` [<identifier> (`,` <identifier>)*] `)` `->` <expr>
directive_data = <expr>[, <directive_data>]

cpudef = <cpudef_directive>* <rule>*
cpudef_directive =
    `#align` <usize> |
    `#bits` <usize> |
    `#labelalign` <usize> |
    `#tokendef` <identifier> `{` (<identifier> `=` <usize>) [`[,\n]` <identifier> `=` <usize>]* `}` |
    `#include` <string> |
    `#fun` <identifier> `(` [<identifier> (`,` <identifier>)*] `)` `->` <expr>

rule = <rule_token>+ `->` <expr>
rule_token =
    `{` <rule_parameter> `}` |
    `[a-zA-Z_][a-zA-Z0-9_]*|[0-9][a-zA-Z0-9_.']*|[()\[\].,#+-*/%!&|`~@<>']|=>|<-`
rule_parameter = `[a-zA-Z_][a-zA-Z0-9_]*` [`:` `[a-zA-Z_][a-zA-Z0-9_]*`]

bankdef = <bankdef_attribute> (`[,\n` <bankdef_attribute>)*
bankdef_attribute = 
    `#addr` <usize> |
    `#size` <usize> |
    `#outp` <usize> |
    `#fill`

string = `".*"`
usize = <expr>

expr = <expr_assignment> [`?` <expr> [`:` <expr_assignment>]]
expr_assignment = <parse_concat> [`=` <expr>]
expr_concat = <expr_lazy_or> [`@` <expr_lazy_or>]
expr_lazy_or = <expr_lazy_and> [`||` <expr_lazy_and>]
expr_lazy_and = <expr_relational> [`&&` <expr_relational>]
expr_relational = <expr_binary_or> [`==|!=|<|<=|>|>=` <expr_binary_or>]
expr_binary_or = <expr_binary_xor> [`|` <expr_binary_xor>]
expr_binary_xor = <expr_binary_and> [`^` <expr_binary_and>]
expr_binary_and = <expr_shifts> [`&` <expr_shifts>]
expr_shifts = <expr_addition> [`<<|>>` <expr_addition>]
expr_addition = <expr_multiplication> [`+|-` <expr_multiplication>]
expr_multiplication = <expr_bitslice> [`*|/|%` <expr_bitslice>]
expr_bitslice = <expr_unary> [`[` <number> `:` <number> `]`]
expr_unary = [`[!-]`] <expr_unary> <expr_call>
expr_call = <expr_leaf> `(` [<expr> [`,` <expr>]*] `)`
expr_leaf = 
    `{` <expr_block> `}` |
    `(` <expr_parenthesized> `)` |
    <expr_variable> |
    <expr_number>
expr_block = [<expr> [`,` <expr>]*]
expr_parenthesized = <expr>
expr_variable = `.[a-zA-Z_][a-zA-Z0-9_]*`
expr_number = `[0-9][a-zA-Z0-9_.']*`
expr_US = <expr_SUB> [`O` <expr_SUB>]

tokens (<token> <pattern_allowed ? # > ➤  <Name>)
    <end>          ➤  End
    <error>        ➤  Error
    <whitespace>   ➤  Whitespace
    <comment>      ➤  Comment
    <line break>   ➤  LineBreak
    <identifier> # ➤  Identifier
    <number>     # ➤  Number
    <string>       ➤  String
    (            # ➤  ParenOpen
    )            # ➤  ParenClose
    [            # ➤  BracketOpen
    ]            # ➤  BracketClose
    {              ➤  BraceOpen
    }              ➤  BraceClose
    .            # ➤  Dot
    ,            # ➤  Comma
    :              ➤  Colon
    ::           # ➤  ColonColon
    ->           # ➤  Arrow
    <-           # ➤  BackArrow
    =>             ➤  FatArrow
    #            # ➤  Hash
    =              ➤  Equal
    +            # ➤  Plus
    -            # ➤  Minus
    *            # ➤  Asterisk
    /            # ➤  Slash
    %            # ➤  Percent
    ?              ➤  Question
    '            # ➤  SingleQuote
    !            # ➤  Exclamation
    &            # ➤  Ampersand
    |            # ➤  VerticalBar
    ^            # ➤  Circumflex
    ~            # ➤  Tilde
    @            # ➤  At
    &&             ➤  AmpersandAmpersand
    ||             ➤  VerticalBarVerticalBar
    ==             ➤  EqualEqual
    !=             ➤  ExclamationEqual
    <            # ➤  LessThan
    <<             ➤  LessThanLessThan
    <=             ➤  LessThanEqual
    >            # ➤  GreaterThan
    >>             ➤  GreaterThanGreaterThan
    >>>            ➤  GreaterThanGreaterThanGreaterThan
    >=             ➤  GreaterThanEqual
